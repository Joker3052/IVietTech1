package com.example.fire_warning_app

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.graphics.Color
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.util.Log
import android.view.View
import android.widget.ImageView
import androidx.core.app.NotificationCompat

class ForegroundService : Service() {
    private lateinit var sharedPref: SharedPreferences
    private lateinit var alarmImg: ImageView
    private var isNotificationShown = false
    private val handler = Handler()
     // 30 seconds

    override fun onCreate() {
        super.onCreate()

        sharedPref = getSharedPreferences("MySharedPreferences", Context.MODE_PRIVATE)
        createNotificationChannel()

        val intent = Intent(this, Bottom::class.java)
        val fireDetectedValue = intent.getBooleanExtra("fireDetectedValue", false)

        // Your code for checking fireDetectedValue and updating UI elements
        alarmImg = ImageView(this)
        if (fireDetectedValue) {
            alarmImg.visibility = View.VISIBLE
            if (!isNotificationShown) {
                showNotification()
            }
        } else {
            alarmImg.visibility = View.GONE
            if (isNotificationShown) {
                dismissNotification()
            }
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        // Lấy giá trị fireDetectedValue từ intent
        val fireDetectedValue = intent?.getBooleanExtra("fireDetectedValue", false) ?: false

        // Tạo thông báo
        val notificationContent = if (fireDetectedValue) "Fire Detected!" else "No Fire Detected"
        val notification: Notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("Foreground Service")
            .setContentText(notificationContent)
            .setSmallIcon(R.drawable.fire96)
            .build()

        // Đặt nội dung thông báo lên thanh thông báo
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(NOTIFICATION_ID, notification)

        // Gọi startForeground() để khởi động dịch vụ trong chế độ foreground
        startForeground(NOTIFICATION_ID, notification)

        return super.onStartCommand(intent, flags, startId)
    }



    override fun onBind(intent: Intent?): IBinder? {
        return null
    }

    private fun showNotification() {
        val notification: Notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("Fire Detected!")
            .setContentText("Please take immediate action.")
            .setSmallIcon(R.drawable.fire96)
            .setAutoCancel(false)
            .setOngoing(true)
            .build()

        val notificationManager =
            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notify(NOTIFICATION_ID, notification)
        isNotificationShown = true

        // Schedule notification dismissal after 30 seconds
//        handler.postDelayed({ dismissNotification() }, notificationDismissDelay)
    }

    private fun dismissNotification() {
        val notificationManager =
            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.cancel(NOTIFICATION_ID)
        isNotificationShown = false
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                "Foreground Service Channel",
                NotificationManager.IMPORTANCE_DEFAULT
            )
            channel.lightColor = Color.BLUE
            channel.lockscreenVisibility = Notification.VISIBILITY_PRIVATE

            val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            manager.createNotificationChannel(channel)
        }
    }

    companion object {
        private const val CHANNEL_ID = "ForegroundServiceChannel"
        private const val NOTIFICATION_ID = 1
    }
}
