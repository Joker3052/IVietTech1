package com.example.fire_warning_app

import android.annotation.SuppressLint
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.widget.*
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.HttpURLConnection
import java.net.URL

class UI_main : AppCompatActivity() {

    @SuppressLint("MissingInflatedId")
    private var sensorService: SensorService? = null
    val sensorDataReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            if (intent.action == "SENSOR_DATA_UPDATE") {
                val smokeValue = intent.getFloatExtra("smokeValue", 0f)
                val temperatureValue = intent.getFloatExtra("temperatureValue", 0f)

                // Cập nhật giao diện với giá trị smokeValue và temperatureValue
                val smokeTextView: TextView = findViewById(R.id.sensor_gas)
                val temperatureTextView: TextView = findViewById(R.id.sensor_temp)
                smokeTextView.text = smokeValue.toString() + " V"
                temperatureTextView.text = temperatureValue.toString() + " ℃"
            }
        }
    }
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_ui_main)
        val sharedPreferences = getSharedPreferences("MY_PREFS_NAME", MODE_PRIVATE)
        val layout_info: LinearLayout = findViewById(R.id.layout_info)
        val layout_History: LinearLayout = findViewById(R.id.layout_History)
        val layout_Sound: LinearLayout = findViewById(R.id.layout_Sound)

        // Khởi tạo dịch vụ
        sensorService = SensorService()

        // Bắt đầu dịch vụ
        startService(Intent(this, SensorService::class.java))
        val filter = IntentFilter("SENSOR_DATA_UPDATE")
        registerReceiver(sensorDataReceiver, filter)

        // Khởi tạo UserApi
        val userRetrofit = Retrofit.Builder()
            .baseUrl("https://anor.pythonanywhere.com/user/")
            .addConverterFactory(GsonConverterFactory.create())
            .build()
       var  userApi = userRetrofit.create(UserApi::class.java)
        val sharedPref = getSharedPreferences("MY_PREFS_NAME", MODE_PRIVATE)
        val email = sharedPref.getString("email", null)

        val handler = Handler(Looper.getMainLooper())
        val delayMillis2 = 2000L
        userApi.getUsers().enqueue(object: Callback<List<User>> {
            override fun onResponse(call: Call<List<User>>, response: Response<List<User>>) {
                val users = response.body()
                if (users != null) {
                    // Tìm kiếm người dùng có email cần tìm
                    val emailToFind = email
                    val foundUser = users.find { it.email == emailToFind }
                    if (foundUser != null) {
                        // Lấy thông tin người dùng
                        val userId = foundUser.id
                        val username = foundUser.username
                        val password = foundUser.password
                        // Tiếp tục xử lý tại đây
                        val editor = sharedPref.edit()
                        editor.putString("username", username)
                        editor.putString("password", password)
                        editor.apply()

                        val etusername: TextView = findViewById(R.id.et_user_name)
                        etusername.text = username
                    }
                } else {
                    Toast.makeText(this@UI_main, "failed?", Toast.LENGTH_SHORT).show()
                }
                // Gọi lại API sau 2 giây
                handler.postDelayed({
                    userApi.getUsers().enqueue(this)
                }, delayMillis2)
            }
            override fun onFailure(call: Call<List<User>>, t: Throwable) {
                // Xử lý lỗi tại đây

                // Gọi lại API sau 2 giây khi có lỗi xảy ra
                handler.postDelayed({
                    userApi.getUsers().enqueue(this)
                }, delayMillis2)
            }
        })


        layout_info.setOnClickListener {
            val intent = Intent(this, Info::class.java)
            startActivity(intent)
        }
        layout_History.setOnClickListener {
            val intent = Intent(this, ImageListActivity::class.java)
            startActivity(intent)
        }
        layout_Sound.setOnClickListener {
            val intent = Intent(this, SoundActivity::class.java)
            startActivity(intent)
        }
    }

    override fun onDestroy() {
        super.onDestroy()

        // Dừng dịch vụ khi Activity bị hủy
        stopService(Intent(this, SensorService::class.java))
        unregisterReceiver(sensorDataReceiver)
    }

}